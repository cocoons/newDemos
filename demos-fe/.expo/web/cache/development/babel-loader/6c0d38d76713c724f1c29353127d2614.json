{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useMemo, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { styles } from \"./styles\";\nimport { ScrollView } from 'react-native-virtualized-view';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar ic_close = require(\"./icon/close.png\");\n\nvar defaultProps = {\n  style: {},\n  value: '',\n  showIcon: true\n};\n\nvar AutoCompleteComponent = function AutoCompleteComponent(props) {\n  var fontFamily = props.fontFamily,\n      style = props.style,\n      inputStyle = props.inputStyle,\n      iconStyle = props.iconStyle,\n      labelStyle = props.labelStyle,\n      _props$placeholderSty = props.placeholderStyle,\n      placeholderStyle = _props$placeholderSty === void 0 ? {} : _props$placeholderSty,\n      textErrorStyle = props.textErrorStyle,\n      label = props.label,\n      _props$placeholderTex = props.placeholderTextColor,\n      placeholderTextColor = _props$placeholderTex === void 0 ? '#000' : _props$placeholderTex,\n      _props$placeholder = props.placeholder,\n      placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,\n      showIcon = props.showIcon,\n      textError = props.textError,\n      focusColor = props.focusColor,\n      data = props.data,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      _props$onChangeText = props.onChangeText,\n      onChangeText = _props$onChangeText === void 0 ? function (value) {} : _props$onChangeText,\n      renderLeftIcon = props.renderLeftIcon,\n      renderRightIcon = props.renderRightIcon,\n      renderItem = props.renderItem;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      values = _useState4[0],\n      setValues = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isFocus = _useState6[0],\n      setIsFocus = _useState6[1];\n\n  var onChange = function onChange(text) {\n    setText(text);\n    onChangeText(text);\n    onSearch(text);\n  };\n\n  var onSearch = function onSearch(text) {\n    if (text.length > 0 && data) {\n      var dataSearch = data.filter(function (e) {\n        var item = e == null ? void 0 : e.toLowerCase().replace(' ', '').normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n        var key = text.toLowerCase().replace(' ', '').normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n        return item.indexOf(key) >= 0;\n      });\n      setValues(dataSearch);\n    } else {\n      setValues([]);\n    }\n  };\n\n  var _renderRightIcon = function _renderRightIcon() {\n    if (showIcon) {\n      if (renderRightIcon) {\n        return renderRightIcon();\n      }\n\n      if (text.length > 0) {\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return onChange('');\n          },\n          children: _jsx(Image, {\n            source: ic_close,\n            style: [styles.icon, iconStyle]\n          })\n        });\n      } else {\n        return null;\n      }\n    }\n\n    return null;\n  };\n\n  var font = function font() {\n    if (fontFamily) {\n      return {\n        fontFamily: fontFamily\n      };\n    } else {\n      return {};\n    }\n  };\n\n  var onFocusCustom = function onFocusCustom(e) {\n    setIsFocus(true);\n\n    if (onFocus) {\n      onFocus(e);\n    }\n  };\n\n  var onBlurCustom = function onBlurCustom(e) {\n    setIsFocus(false);\n\n    if (onBlur) {\n      onBlur(e);\n    }\n  };\n\n  var onSubmitEdit = function onSubmitEdit() {\n    if (text.length > 0) {\n      onChange(text);\n    }\n  };\n\n  var _renderItem = function _renderItem(_ref) {\n    var item = _ref.item,\n        index = _ref.index;\n    return _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        onChange(item);\n        setValues(null);\n        Keyboard.dismiss();\n      },\n      children: renderItem ? renderItem(item) : _jsx(View, {\n        style: styles.item,\n        children: _jsx(Text, {\n          style: [styles.textItem, font()],\n          children: item\n        })\n      })\n    }, index);\n  };\n\n  var _renderItemSelected = function _renderItemSelected() {\n    if (values && values.length > 0) {\n      return _jsx(ScrollView, {\n        keyboardShouldPersistTaps: \"handled\",\n        children: _jsx(View, {\n          style: styles.listContainer,\n          children: _jsx(FlatList, {\n            keyboardShouldPersistTaps: \"handled\",\n            data: values,\n            renderItem: _renderItem,\n            keyExtractor: function keyExtractor(item, index) {\n              return index.toString();\n            }\n          })\n        })\n      });\n    }\n  };\n\n  var colorFocus = useMemo(function () {\n    if (isFocus && focusColor) {\n      return {\n        borderBottomColor: focusColor,\n        borderTopColor: focusColor,\n        borderLeftColor: focusColor,\n        borderRightColor: focusColor\n      };\n    } else {\n      return {};\n    }\n  }, [isFocus]);\n  var styleLable = useMemo(function () {\n    if (isFocus || text.length > 0 && label) {\n      return _objectSpread({\n        top: 5,\n        color: isFocus ? focusColor : null\n      }, labelStyle);\n    } else {\n      return _objectSpread({\n        position: 'absolute'\n      }, placeholderStyle);\n    }\n  }, [isFocus, text, placeholderStyle, labelStyle]);\n  return _jsxs(_Fragment, {\n    children: [_jsx(View, {\n      style: [styles.container, style, colorFocus],\n      children: _jsxs(View, {\n        style: styles.textInput,\n        children: [renderLeftIcon == null ? void 0 : renderLeftIcon(), _jsxs(View, {\n          style: {\n            flex: 1,\n            justifyContent: 'center'\n          },\n          children: [label ? _jsx(Text, {\n            style: [styles.label, styleLable],\n            children: label\n          }) : null, _jsx(TextInput, _objectSpread(_objectSpread({}, props), {}, {\n            style: [styles.input, inputStyle, font()],\n            value: text,\n            placeholder: isFocus || !label ? placeholder : '',\n            placeholderTextColor: placeholderTextColor,\n            onChangeText: onChange,\n            onFocus: onFocusCustom,\n            onBlur: onBlurCustom,\n            onSubmitEditing: onSubmitEdit\n          }))]\n        }), _renderRightIcon()]\n      })\n    }), _renderItemSelected(), textError ? _jsx(Text, {\n      style: [styles.textError, textErrorStyle],\n      children: textError\n    }) : null]\n  });\n};\n\nAutoCompleteComponent.defaultProps = defaultProps;\nexport default AutoCompleteComponent;","map":{"version":3,"sources":["/home/alex/nodeProjects/newDemos/demos-fe/node_modules/react-native-element-textinput/src/AutoComplete/index.tsx"],"names":["React","useMemo","useState","styles","ScrollView","ic_close","require","defaultProps","style","value","showIcon","AutoCompleteComponent","props","fontFamily","inputStyle","iconStyle","labelStyle","placeholderStyle","textErrorStyle","label","placeholderTextColor","placeholder","textError","focusColor","data","onFocus","onBlur","onChangeText","renderLeftIcon","renderRightIcon","renderItem","text","setText","values","setValues","isFocus","setIsFocus","onChange","onSearch","length","dataSearch","filter","e","item","toLowerCase","replace","normalize","key","indexOf","_renderRightIcon","icon","font","onFocusCustom","onBlurCustom","onSubmitEdit","_renderItem","index","Keyboard","dismiss","textItem","_renderItemSelected","listContainer","toString","colorFocus","borderBottomColor","borderTopColor","borderLeftColor","borderRightColor","styleLable","top","color","position","container","textInput","flex","justifyContent","input"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { FlatList, Image, Text, TextInput, TouchableOpacity, View, Keyboard } from 'react-native';\nimport { styles } from './styles';\nimport { CTextInput } from './type';\nimport { ScrollView } from 'react-native-virtualized-view';\n\nconst ic_close = require('./icon/close.png');\n\nconst defaultProps = {\n  style: {},\n  value: '',\n  showIcon: true,\n};\n\nconst AutoCompleteComponent: CTextInput = props => {\n  const {\n    fontFamily,\n    style,\n    inputStyle,\n    iconStyle,\n    labelStyle,\n    placeholderStyle = {},\n    textErrorStyle,\n    label,\n    placeholderTextColor = '#000',\n    placeholder = '',\n    showIcon,\n    textError,\n    focusColor,\n    data,\n    onFocus,\n    onBlur,\n    onChangeText = (value: string) => { },\n    renderLeftIcon,\n    renderRightIcon,\n    renderItem\n  } = props;\n\n  const [text, setText] = useState<string>('');\n  const [values, setValues] = useState<string[] | null>(null);\n  const [isFocus, setIsFocus] = useState<boolean>(false);\n\n  const onChange = (text: string) => {\n    setText(text);\n    onChangeText(text);\n    onSearch(text);\n  };\n\n  const onSearch = (text: string) => {\n    if (text.length > 0 && data) {\n      const dataSearch = data.filter(e => {\n        const item = e?.toLowerCase().replace(' ', '').normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n        const key = text.toLowerCase().replace(' ', '').normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n\n        return item.indexOf(key) >= 0\n      });\n      setValues(dataSearch);\n    } else {\n      setValues([]);\n    }\n  };\n\n  const _renderRightIcon = () => {\n    if (showIcon) {\n      if (renderRightIcon) {\n        return renderRightIcon();\n      }\n      if (text.length > 0) {\n        return (\n          <TouchableOpacity onPress={() => onChange('')}>\n            <Image source={ic_close} style={[styles.icon, iconStyle]} />\n          </TouchableOpacity>\n        );\n      } else {\n        return null;\n      }\n    }\n    return null;\n  };\n\n  const font = () => {\n    if (fontFamily) {\n      return {\n        fontFamily: fontFamily,\n      };\n    } else {\n      return {};\n    }\n  };\n\n  const onFocusCustom = (e: any) => {\n    setIsFocus(true);\n    if (onFocus) {\n      onFocus(e);\n    }\n  };\n\n  const onBlurCustom = (e: any) => {\n    setIsFocus(false);\n    if (onBlur) {\n      onBlur(e);\n    }\n  };\n\n  const onSubmitEdit = () => {\n    if (text.length > 0) {\n      onChange(text);\n    }\n  };\n\n  const _renderItem = ({ item, index }: { item: any; index: number }) => {\n    return (\n      <TouchableOpacity key={index} onPress={() => { onChange(item); setValues(null); Keyboard.dismiss() }}>\n        {renderItem ? renderItem(item) : <View style={styles.item}>\n          <Text style={[styles.textItem, font()]}>{item}</Text>\n        </View>}\n      </TouchableOpacity>\n    );\n  };\n\n  const _renderItemSelected = () => {\n    if (values && values.length > 0) {\n      return (\n        <ScrollView keyboardShouldPersistTaps=\"handled\">\n          <View style={styles.listContainer}>\n            <FlatList\n              keyboardShouldPersistTaps=\"handled\"\n              data={values}\n              renderItem={_renderItem}\n              keyExtractor={(item, index) => index.toString()}\n            />\n          </View>\n        </ScrollView>\n      )\n    }\n  };\n\n  const colorFocus = useMemo(() => {\n    if (isFocus && focusColor) {\n      return {\n        borderBottomColor: focusColor,\n        borderTopColor: focusColor,\n        borderLeftColor: focusColor,\n        borderRightColor: focusColor\n      };\n    } else {\n      return {};\n    }\n  }, [isFocus]);\n\n  const styleLable: any = useMemo(() => {\n    if (isFocus || text.length > 0 && label) {\n      return {\n        top: 5,\n        color: isFocus ? focusColor: null,\n        ...labelStyle\n      };\n    } else {\n      return {\n        position: 'absolute',\n        ...placeholderStyle\n      }\n    }\n  }, [isFocus, text, placeholderStyle, labelStyle]);\n\n  return (\n    <>\n      <View style={[styles.container, style, colorFocus]}>\n        <View\n          style={styles.textInput}>\n          {renderLeftIcon?.()}\n          <View style={{ flex: 1, justifyContent: 'center' }}>\n            {label ? <Text style={[styles.label, styleLable]}>{label}</Text> : null}\n            <TextInput\n              {...props}\n              style={[styles.input, inputStyle, font()]}\n              value={text}\n              placeholder={isFocus || !label ? placeholder : ''}\n              placeholderTextColor={placeholderTextColor}\n              onChangeText={onChange}\n              onFocus={onFocusCustom}\n              onBlur={onBlurCustom}\n              onSubmitEditing={onSubmitEdit}\n            />\n          </View>\n          {_renderRightIcon()}\n        </View>\n      </View>\n      {_renderItemSelected()}\n      {textError ? (\n        <Text style={[styles.textError, textErrorStyle]}>{textError}</Text>\n      ) : null}\n    </>\n  );\n};\n\nAutoCompleteComponent.defaultProps = defaultProps;\n\nexport default AutoCompleteComponent;\n"]},"metadata":{},"sourceType":"module"}