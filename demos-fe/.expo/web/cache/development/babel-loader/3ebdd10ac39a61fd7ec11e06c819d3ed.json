{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { styles } from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar ic_eye = require(\"./icon/eye.png\");\n\nvar ic_uneye = require(\"./icon/uneye.png\");\n\nvar ic_close = require(\"./icon/close.png\");\n\nvar defaultProps = {\n  style: {},\n  value: '',\n  showIcon: true,\n  currency: false,\n  numeric: false\n};\n\nvar TextInputComponent = function TextInputComponent(props) {\n  var fontFamily = props.fontFamily,\n      style = props.style,\n      inputStyle = props.inputStyle,\n      iconStyle = props.iconStyle,\n      labelStyle = props.labelStyle,\n      _props$placeholderSty = props.placeholderStyle,\n      placeholderStyle = _props$placeholderSty === void 0 ? {} : _props$placeholderSty,\n      textErrorStyle = props.textErrorStyle,\n      value = props.value,\n      label = props.label,\n      secureTextEntry = props.secureTextEntry,\n      _props$placeholderTex = props.placeholderTextColor,\n      placeholderTextColor = _props$placeholderTex === void 0 ? '#000' : _props$placeholderTex,\n      _props$placeholder = props.placeholder,\n      placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,\n      showIcon = props.showIcon,\n      numeric = props.numeric,\n      textError = props.textError,\n      focusColor = props.focusColor,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      _props$onChangeText = props.onChangeText,\n      onChangeText = _props$onChangeText === void 0 ? function (value) {} : _props$onChangeText,\n      renderLeftIcon = props.renderLeftIcon,\n      renderRightIcon = props.renderRightIcon;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isFocus = _useState4[0],\n      setIsFocus = _useState4[1];\n\n  var _useState5 = useState(secureTextEntry ? true : false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      textEntry = _useState6[0],\n      setTextEntry = _useState6[1];\n\n  useEffect(function () {\n    if (value) {\n      if (numeric) {\n        setText(formatCurrency(value));\n      } else {\n        setText(value);\n      }\n    } else {\n      setText(\"\");\n    }\n  }, [value]);\n\n  var formatCurrency = function formatCurrency(num) {\n    var values = num.toString().replace(/\\D/g, '');\n    return values.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n  };\n\n  var reConvertCurrency = function reConvertCurrency(x) {\n    var s;\n    s = x.split('.');\n    s = s.join('');\n    return s;\n  };\n\n  var onChange = function onChange(text) {\n    if (numeric) {\n      setText(formatCurrency(text));\n      onChangeText(reConvertCurrency(text));\n    } else {\n      setText(text);\n      onChangeText(text);\n    }\n  };\n\n  var onChangeTextEntry = function onChangeTextEntry() {\n    setTextEntry(!textEntry);\n  };\n\n  var _renderRightIcon = function _renderRightIcon() {\n    if (showIcon) {\n      if (renderRightIcon) {\n        return renderRightIcon();\n      }\n\n      if (text.length > 0) {\n        if (secureTextEntry) {\n          return _jsx(TouchableOpacity, {\n            onPress: onChangeTextEntry,\n            children: _jsx(Image, {\n              source: textEntry ? ic_eye : ic_uneye,\n              style: [styles.icon, iconStyle]\n            })\n          });\n        } else {\n          return _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return onChange('');\n            },\n            children: _jsx(Image, {\n              source: ic_close,\n              style: [styles.icon, iconStyle]\n            })\n          });\n        }\n      } else {\n        return null;\n      }\n    }\n\n    return null;\n  };\n\n  var font = function font() {\n    if (fontFamily) {\n      return {\n        fontFamily: fontFamily\n      };\n    } else {\n      return {};\n    }\n  };\n\n  var onFocusCustom = function onFocusCustom(e) {\n    setIsFocus(true);\n\n    if (onFocus) {\n      onFocus(e);\n    }\n  };\n\n  var onBlurCustom = function onBlurCustom(e) {\n    setIsFocus(false);\n\n    if (onBlur) {\n      onBlur(e);\n    }\n  };\n\n  var colorFocus = useMemo(function () {\n    if (isFocus && focusColor) {\n      return {\n        borderBottomColor: focusColor,\n        borderTopColor: focusColor,\n        borderLeftColor: focusColor,\n        borderRightColor: focusColor\n      };\n    } else {\n      return {};\n    }\n  }, [isFocus]);\n  var styleLable = useMemo(function () {\n    if (isFocus || text.length > 0 && label) {\n      return _objectSpread({\n        top: 5,\n        color: isFocus ? focusColor : null\n      }, labelStyle);\n    } else {\n      return _objectSpread({\n        position: 'absolute'\n      }, placeholderStyle);\n    }\n  }, [isFocus, text, placeholderStyle, labelStyle]);\n  return _jsxs(_Fragment, {\n    children: [_jsx(View, {\n      style: [styles.container, style, colorFocus],\n      children: _jsxs(View, {\n        style: [styles.textInput],\n        children: [renderLeftIcon == null ? void 0 : renderLeftIcon(), _jsxs(View, {\n          style: {\n            flex: 1,\n            justifyContent: 'center'\n          },\n          children: [label ? _jsx(Text, {\n            style: [styles.label, styleLable],\n            children: label\n          }) : null, _jsx(TextInput, _objectSpread(_objectSpread({}, props), {}, {\n            style: [styles.input, inputStyle, font()],\n            secureTextEntry: textEntry,\n            value: text,\n            placeholder: isFocus || !label ? placeholder : '',\n            placeholderTextColor: placeholderTextColor,\n            onChangeText: onChange,\n            onFocus: onFocusCustom,\n            onBlur: onBlurCustom\n          }))]\n        }), _renderRightIcon()]\n      })\n    }), textError ? _jsx(Text, {\n      style: [styles.textError, textErrorStyle],\n      children: textError\n    }) : null]\n  });\n};\n\nTextInputComponent.defaultProps = defaultProps;\nexport default TextInputComponent;","map":{"version":3,"sources":["/home/alex/nodeProjects/newDemos/demos-fe/node_modules/react-native-element-textinput/src/TextInput/index.tsx"],"names":["React","useEffect","useMemo","useState","styles","ic_eye","require","ic_uneye","ic_close","defaultProps","style","value","showIcon","currency","numeric","TextInputComponent","props","fontFamily","inputStyle","iconStyle","labelStyle","placeholderStyle","textErrorStyle","label","secureTextEntry","placeholderTextColor","placeholder","textError","focusColor","onFocus","onBlur","onChangeText","renderLeftIcon","renderRightIcon","text","setText","isFocus","setIsFocus","textEntry","setTextEntry","formatCurrency","num","values","toString","replace","reConvertCurrency","x","s","split","join","onChange","onChangeTextEntry","_renderRightIcon","length","icon","font","onFocusCustom","e","onBlurCustom","colorFocus","borderBottomColor","borderTopColor","borderLeftColor","borderRightColor","styleLable","top","color","position","container","textInput","flex","justifyContent","input"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { Image, Text, TextInput, TouchableOpacity, View } from 'react-native';\nimport { styles } from './styles';\nimport { CTextInput } from './type';\n\nconst ic_eye = require('./icon/eye.png');\nconst ic_uneye = require('./icon/uneye.png');\nconst ic_close = require('./icon/close.png');\n\nconst defaultProps = {\n  style: {},\n  value: '',\n  showIcon: true,\n  currency: false,\n  numeric: false,\n};\n\nconst TextInputComponent: CTextInput = props => {\n  const {\n    fontFamily,\n    style,\n    inputStyle,\n    iconStyle,\n    labelStyle,\n    placeholderStyle = {},\n    textErrorStyle,\n    value,\n    label,\n    secureTextEntry,\n    placeholderTextColor = '#000',\n    placeholder = '',\n    showIcon,\n    numeric,\n    textError,\n    focusColor,\n    onFocus,\n    onBlur,\n    onChangeText = (value: string) => { },\n    renderLeftIcon,\n    renderRightIcon,\n  } = props;\n\n  const [text, setText] = useState<string>('');\n  const [isFocus, setIsFocus] = useState<boolean>(false);\n  const [textEntry, setTextEntry] = useState<boolean>(\n    secureTextEntry ? true : false,\n  );\n\n  useEffect(() => {\n    if (value) {\n      if (numeric) {\n        setText(formatCurrency(value));\n      } else {\n        setText(value);\n      }\n    } else {\n      setText(\"\");\n    }\n  }, [value]);\n\n  const formatCurrency = (num: string) => {\n    const values = num.toString().replace(/\\D/g, '');\n    return values.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n  };\n\n  const reConvertCurrency = (x: string) => {\n    let s;\n    s = x.split('.');\n    s = s.join('');\n    return s;\n  };\n\n  const onChange = (text: string) => {\n    if (numeric) {\n      setText(formatCurrency(text));\n      onChangeText(reConvertCurrency(text));\n    } else {\n      setText(text);\n      onChangeText(text);\n    }\n  };\n\n  const onChangeTextEntry = () => {\n    setTextEntry(!textEntry);\n  };\n\n  const _renderRightIcon = () => {\n    if (showIcon) {\n      if (renderRightIcon) {\n        return renderRightIcon();\n      }\n      if (text.length > 0) {\n        if (secureTextEntry) {\n          return (\n            <TouchableOpacity onPress={onChangeTextEntry}>\n              <Image\n                source={textEntry ? ic_eye : ic_uneye}\n                style={[styles.icon, iconStyle]}\n              />\n            </TouchableOpacity>\n          );\n        } else {\n          return (\n            <TouchableOpacity onPress={() => onChange('')}>\n              <Image source={ic_close} style={[styles.icon, iconStyle]} />\n            </TouchableOpacity>\n          );\n        }\n      } else {\n        return null;\n      }\n\n    }\n    return null;\n  };\n\n  const font = () => {\n    if (fontFamily) {\n      return {\n        fontFamily: fontFamily,\n      };\n    } else {\n      return {};\n    }\n  };\n\n  const onFocusCustom = (e: any) => {\n    setIsFocus(true);\n    if (onFocus) {\n      onFocus(e);\n    }\n  };\n\n  const onBlurCustom = (e: any) => {\n    setIsFocus(false);\n    if (onBlur) {\n      onBlur(e);\n    }\n  };\n\n  const colorFocus = useMemo(() => {\n    if (isFocus && focusColor) {\n      return {\n        borderBottomColor: focusColor,\n        borderTopColor: focusColor,\n        borderLeftColor: focusColor,\n        borderRightColor: focusColor\n      };\n    } else {\n      return {};\n    }\n  }, [isFocus]);\n\n  const styleLable: any = useMemo(() => {\n    if (isFocus || text.length > 0 && label) {\n      return {\n        top: 5,\n        color: isFocus ? focusColor : null,\n        ...labelStyle\n      };\n    } else {\n      return {\n        position: 'absolute',\n        ...placeholderStyle\n      }\n    }\n  }, [isFocus, text, placeholderStyle, labelStyle]);\n\n  return (\n    <>\n      <View style={[styles.container, style, colorFocus]}>\n        <View\n          style={[\n            styles.textInput,\n          ]\n          }>\n          {renderLeftIcon?.()}\n          <View style={{ flex: 1, justifyContent: 'center' }}>\n            {label ? <Text style={[styles.label, styleLable]}>{label}</Text> : null}\n            <TextInput\n              {...props}\n              style={[styles.input, inputStyle, font()]}\n              secureTextEntry={textEntry}\n              value={text}\n              placeholder={isFocus || !label ? placeholder : ''}\n              placeholderTextColor={placeholderTextColor}\n              onChangeText={onChange}\n              onFocus={onFocusCustom}\n              onBlur={onBlurCustom}\n            />\n          </View>\n          {_renderRightIcon()}\n        </View>\n      </View>\n      {textError ? (\n        <Text style={[styles.textError, textErrorStyle]}>{textError}</Text>\n      ) : null}\n    </>\n  );\n};\n\nTextInputComponent.defaultProps = defaultProps;\n\nexport default TextInputComponent;\n"]},"metadata":{},"sourceType":"module"}