{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { styles } from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar ic_close = require(\"./icon/close.png\");\n\nvar defaultProps = {\n  style: {},\n  value: '',\n  showIcon: true\n};\n\nvar HashtagInputComponent = function HashtagInputComponent(props) {\n  var fontFamily = props.fontFamily,\n      style = props.style,\n      inputStyle = props.inputStyle,\n      iconStyle = props.iconStyle,\n      labelStyle = props.labelStyle,\n      _props$placeholderSty = props.placeholderStyle,\n      placeholderStyle = _props$placeholderSty === void 0 ? {} : _props$placeholderSty,\n      textErrorStyle = props.textErrorStyle,\n      label = props.label,\n      _props$placeholderTex = props.placeholderTextColor,\n      placeholderTextColor = _props$placeholderTex === void 0 ? '#000' : _props$placeholderTex,\n      _props$placeholder = props.placeholder,\n      placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,\n      showIcon = props.showIcon,\n      textError = props.textError,\n      focusColor = props.focusColor,\n      _props$data = props.data,\n      data = _props$data === void 0 ? [] : _props$data,\n      hashtagStyle = props.hashtagStyle,\n      hashtagTextStyle = props.hashtagTextStyle,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      _props$onChangeText = props.onChangeText,\n      onChangeText = _props$onChangeText === void 0 ? function (value) {} : _props$onChangeText,\n      renderLeftIcon = props.renderLeftIcon,\n      renderRightIcon = props.renderRightIcon,\n      _props$onChangeValue = props.onChangeValue,\n      onChangeValue = _props$onChangeValue === void 0 ? function (value) {} : _props$onChangeValue,\n      renderHashtagItem = props.renderHashtagItem;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hashtag = _useState4[0],\n      setHashtag = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isFocus = _useState6[0],\n      setIsFocus = _useState6[1];\n\n  var onChange = function onChange(text) {\n    setText(text);\n    onChangeText(text);\n  };\n\n  var _renderRightIcon = function _renderRightIcon() {\n    if (showIcon) {\n      if (renderRightIcon) {\n        return renderRightIcon();\n      }\n\n      if (text.length > 0) {\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return onChange('');\n          },\n          children: _jsx(Image, {\n            source: ic_close,\n            style: [styles.icon, iconStyle]\n          })\n        });\n      } else {\n        return null;\n      }\n    }\n\n    return null;\n  };\n\n  var font = function font() {\n    if (fontFamily) {\n      return {\n        fontFamily: fontFamily\n      };\n    } else {\n      return {};\n    }\n  };\n\n  var onFocusCustom = function onFocusCustom(e) {\n    setIsFocus(true);\n\n    if (onFocus) {\n      onFocus(e);\n    }\n  };\n\n  var onBlurCustom = function onBlurCustom(e) {\n    setIsFocus(false);\n\n    if (onBlur) {\n      onBlur(e);\n    }\n  };\n\n  var onRemoveItem = function onRemoveItem(index) {\n    if (hashtag) {\n      if (props.editable === undefined || props.editable) {\n        var array = _toConsumableArray(hashtag);\n\n        array.splice(index, 1);\n        setHashtag(array);\n        onChangeValue(array);\n      }\n    }\n  };\n\n  useEffect(function () {\n    if (data) {\n      setHashtag(data);\n    } else {\n      setHashtag(null);\n    }\n  }, [data]);\n\n  var onSubmitEdit = function onSubmitEdit() {\n    if (hashtag && text.length > 0) {\n      hashtag.push(text);\n      setText('');\n      onChangeValue(hashtag);\n    }\n  };\n\n  var _renderItemSelected = useCallback(function () {\n    if (hashtag && hashtag.length > 0) {\n      return _jsx(View, {\n        style: {\n          flexDirection: 'row',\n          flexWrap: 'wrap'\n        },\n        children: hashtag.map(function (e, index) {\n          if (renderHashtagItem) {\n            return _jsx(TouchableOpacity, {\n              children: renderHashtagItem(e, function () {\n                onRemoveItem(index);\n              })\n            }, index);\n          }\n\n          return _jsxs(TouchableOpacity, {\n            style: [styles.selectedItem, hashtagStyle],\n            onPress: function onPress() {\n              onRemoveItem(index);\n            },\n            children: [_jsx(Text, {\n              style: [styles.selectedTextItem, hashtagTextStyle, font()],\n              children: e\n            }), _jsx(Text, {\n              style: [styles.selectedTextItem, hashtagTextStyle, font()],\n              children: \"\\u24E7\"\n            })]\n          }, index);\n        })\n      });\n    }\n  }, [hashtag]);\n\n  var colorFocus = useMemo(function () {\n    if (isFocus && focusColor) {\n      return {\n        borderBottomColor: focusColor,\n        borderTopColor: focusColor,\n        borderLeftColor: focusColor,\n        borderRightColor: focusColor\n      };\n    } else {\n      return {};\n    }\n  }, [isFocus]);\n  var styleLable = useMemo(function () {\n    if (isFocus || text.length > 0 && label) {\n      return _objectSpread({\n        top: 5,\n        color: isFocus ? focusColor : null\n      }, labelStyle);\n    } else {\n      return _objectSpread({\n        position: 'absolute'\n      }, placeholderStyle);\n    }\n  }, [isFocus, text, placeholderStyle, labelStyle]);\n  return _jsxs(_Fragment, {\n    children: [_jsx(View, {\n      style: [styles.container, style, colorFocus],\n      children: _jsxs(View, {\n        style: styles.textInput,\n        children: [renderLeftIcon == null ? void 0 : renderLeftIcon(), _jsxs(View, {\n          style: {\n            flex: 1,\n            justifyContent: 'center'\n          },\n          children: [label ? _jsx(Text, {\n            style: [styles.label, styleLable],\n            children: label\n          }) : null, _jsx(TextInput, _objectSpread(_objectSpread({}, props), {}, {\n            style: [styles.input, inputStyle, font()],\n            value: text,\n            placeholder: isFocus || !label ? placeholder : '',\n            placeholderTextColor: placeholderTextColor,\n            onChangeText: onChange,\n            onFocus: onFocusCustom,\n            onBlur: onBlurCustom,\n            onSubmitEditing: onSubmitEdit\n          }))]\n        }), _renderRightIcon()]\n      })\n    }), _renderItemSelected(), textError ? _jsx(Text, {\n      style: [styles.textError, textErrorStyle],\n      children: textError\n    }) : null]\n  });\n};\n\nHashtagInputComponent.defaultProps = defaultProps;\nexport default HashtagInputComponent;","map":{"version":3,"sources":["/home/alex/nodeProjects/newDemos/demos-fe/node_modules/react-native-element-textinput/src/HashtagInput/index.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","styles","ic_close","require","defaultProps","style","value","showIcon","HashtagInputComponent","props","fontFamily","inputStyle","iconStyle","labelStyle","placeholderStyle","textErrorStyle","label","placeholderTextColor","placeholder","textError","focusColor","data","hashtagStyle","hashtagTextStyle","onFocus","onBlur","onChangeText","renderLeftIcon","renderRightIcon","onChangeValue","renderHashtagItem","text","setText","hashtag","setHashtag","isFocus","setIsFocus","onChange","_renderRightIcon","length","icon","font","onFocusCustom","e","onBlurCustom","onRemoveItem","index","editable","undefined","array","splice","onSubmitEdit","push","_renderItemSelected","flexDirection","flexWrap","map","selectedItem","selectedTextItem","colorFocus","borderBottomColor","borderTopColor","borderLeftColor","borderRightColor","styleLable","top","color","position","container","textInput","flex","justifyContent","input"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Image, Text, TextInput, TouchableOpacity, View } from 'react-native';\nimport { styles } from './styles';\nimport { CTextInput } from './type';\n\nconst ic_close = require('./icon/close.png');\n\nconst defaultProps = {\n  style: {},\n  value: '',\n  showIcon: true,\n};\n\nconst HashtagInputComponent: CTextInput = props => {\n  const {\n    fontFamily,\n    style,\n    inputStyle,\n    iconStyle,\n    labelStyle,\n    placeholderStyle = {},\n    textErrorStyle,\n    label,\n    placeholderTextColor = '#000',\n    placeholder = '',\n    showIcon,\n    textError,\n    focusColor,\n    data = [],\n    hashtagStyle,\n    hashtagTextStyle,\n    onFocus,\n    onBlur,\n    onChangeText = (value: string) => { },\n    renderLeftIcon,\n    renderRightIcon,\n    onChangeValue = (value: string[]) => { },\n    renderHashtagItem\n  } = props;\n\n  const [text, setText] = useState<string>('');\n  const [hashtag, setHashtag] = useState<string[] | null>(null);\n  const [isFocus, setIsFocus] = useState<boolean>(false);\n\n  const onChange = (text: string) => {\n    setText(text);\n    onChangeText(text);\n  };\n\n  const _renderRightIcon = () => {\n    if (showIcon) {\n      if (renderRightIcon) {\n        return renderRightIcon();\n      }\n      if (text.length > 0) {\n        return (\n          <TouchableOpacity onPress={() => onChange('')}>\n            <Image source={ic_close} style={[styles.icon, iconStyle]} />\n          </TouchableOpacity>\n        );\n      } else {\n        return null;\n      }\n    }\n    return null;\n  };\n\n  const font = () => {\n    if (fontFamily) {\n      return {\n        fontFamily: fontFamily,\n      };\n    } else {\n      return {};\n    }\n  };\n\n  const onFocusCustom = (e: any) => {\n    setIsFocus(true);\n    if (onFocus) {\n      onFocus(e);\n    }\n  };\n\n  const onBlurCustom = (e: any) => {\n    setIsFocus(false);\n    if (onBlur) {\n      onBlur(e);\n    }\n  };\n\n  const onRemoveItem = (index: number) => {\n    if (hashtag) {\n      if (props.editable === undefined || props.editable) {\n        var array = [...hashtag];\n        array.splice(index, 1);\n        setHashtag(array);\n        onChangeValue(array);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (data) {\n      setHashtag(data);\n    } else {\n      setHashtag(null);\n    }\n  }, [data]);\n\n  const onSubmitEdit = () => {\n    if (hashtag && text.length > 0) {\n      hashtag.push(text);\n      setText('');\n      onChangeValue(hashtag);\n    }\n  };\n\n  const _renderItemSelected = useCallback(() => {\n    if (hashtag && hashtag.length > 0) {\n      return (\n        <View style={{ flexDirection: 'row', flexWrap: 'wrap' }}>\n          {hashtag.map((e, index) => {\n            if (renderHashtagItem) {\n              return <TouchableOpacity\n                key={index}\n              >\n                {renderHashtagItem(e, () => { onRemoveItem(index) })}\n              </TouchableOpacity>\n            }\n            return (\n              <TouchableOpacity\n                key={index}\n                style={[styles.selectedItem, hashtagStyle]}\n                onPress={() => { onRemoveItem(index) }}\n              >\n                <Text style={[styles.selectedTextItem, hashtagTextStyle, font()]}>{e}</Text>\n                <Text style={[styles.selectedTextItem, hashtagTextStyle, font()]}>ⓧ</Text>\n              </TouchableOpacity>\n            )\n          })}\n        </View>)\n    }\n  }, [hashtag]);\n\n  const colorFocus = useMemo(() => {\n    if (isFocus && focusColor) {\n      return {\n        borderBottomColor: focusColor,\n        borderTopColor: focusColor,\n        borderLeftColor: focusColor,\n        borderRightColor: focusColor\n      };\n    } else {\n      return {};\n    }\n  }, [isFocus]);\n\n  const styleLable: any = useMemo(() => {\n    if (isFocus || text.length > 0 && label) {\n      return {\n        top: 5,\n        color: isFocus ? focusColor : null,\n        ...labelStyle\n      };\n    } else {\n      return {\n        position: 'absolute',\n        ...placeholderStyle\n      }\n    }\n  }, [isFocus, text, placeholderStyle, labelStyle]);\n\n  return (\n    <>\n      <View style={[styles.container, style, colorFocus]}>\n        <View\n          style={styles.textInput}>\n          {renderLeftIcon?.()}\n          <View style={{ flex: 1, justifyContent: 'center' }}>\n            {label ? <Text style={[styles.label, styleLable]}>{label}</Text> : null}\n            <TextInput\n              {...props}\n              style={[styles.input, inputStyle, font()]}\n              value={text}\n              placeholder={isFocus || !label ? placeholder : ''}\n              placeholderTextColor={placeholderTextColor}\n              onChangeText={onChange}\n              onFocus={onFocusCustom}\n              onBlur={onBlurCustom}\n              onSubmitEditing={onSubmitEdit}\n            />\n          </View>\n          {_renderRightIcon()}\n        </View>\n      </View>\n      {_renderItemSelected()}\n      {textError ? (\n        <Text style={[styles.textError, textErrorStyle]}>{textError}</Text>\n      ) : null}\n    </>\n  );\n};\n\nHashtagInputComponent.defaultProps = defaultProps;\n\nexport default HashtagInputComponent;\n"]},"metadata":{},"sourceType":"module"}